import re
from pathlib import Path

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
INPUT_FILE = "knowledge_base_aliyah_full.txt"   # –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
OUTPUT_FILE = "cleaned_base.txt"                # –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
MIN_LENGTH = 10                                 # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏

# –ü–æ–¥—Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å (—Å—Ç—Ä–æ–∫–∏ —Å –Ω–∏–º–∏ –Ω–µ –ø–æ–ø–∞–¥—É—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
EXCLUDE_SUBSTRINGS = [
    "–°—Å—ã–ª–∫–∞:",
    "–î–∞—Ç–∞ –ü–∞—Ä—Å–∏–Ω–≥–∞",
    "–ù–∞ —ç—Ç–æ–º –ø–æ—Ä—Ç–∞–ª–µ —Å–æ–±—Ä–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
    "–°–º–æ—Ç—Ä–∏—Ç–µ —Ç–∞–∫–∂–µ",
    "–í–µ—Ä–Ω—É–≤—à–∏–µ—Å—è –∂–∏—Ç–µ–ª–∏",
    "–í—ã—Ö–æ–¥—Ü—ã –∏–∑ –≠—Ñ–∏–æ–ø–∏–∏",
    "–£–∑–Ω–∏–∫–∏ –°–∏–æ–Ω–∞",
]

# --- 1. –§—É–Ω–∫—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ ---

def clean_line(line: str) -> str:
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤, —Ü–∏—Ñ—Ä, –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –±–∞–∑–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è.
    """
    cleaned = re.sub(r"[^–ê-–Ø–∞-—è–Å—ë0-9\s\.,!\?\-:;\"'()\[\]]+", "", line)
    return cleaned.strip()


def should_exclude(line: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏.
    """
    for substr in EXCLUDE_SUBSTRINGS:
        if substr.lower() in line.lower():
            return True
    return False


def is_valid_line(line: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –≤—Å–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏:
    - —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É
    - –Ω–µ –∫–æ—Ä–æ—Ç–∫–∞—è
    - –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –ø–æ–¥—Å—Ç—Ä–æ–∫
    """
    if not line or len(line) < MIN_LENGTH:
        return False
    if not re.search(r"[–ê-–Ø–∞-—è–Å—ë]", line):
        return False
    if should_exclude(line):
        return False
    return True


# --- 2. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ ---

def clean_file(input_path: str, output_path: str):
    seen = set()
    cleaned_lines = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if not Path(input_path).exists():
        print(f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª '{input_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ß—Ç–µ–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∫–∞
    with open(input_path, "r", encoding="utf-8") as infile:
        for raw_line in infile:
            line = clean_line(raw_line)
            if not is_valid_line(line):
                continue
            if line not in seen:
                seen.add(line)
                cleaned_lines.append(line)

    # –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    with open(output_path, "w", encoding="utf-8") as outfile:
        outfile.write("\n".join(cleaned_lines))

    print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    print(f"üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {input_path}")
    print(f"üíæ –û—á–∏—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {output_path}")
    print(f"üìä –ò—Ç–æ–≥: {len(cleaned_lines)} —Å—Ç—Ä–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")


# --- 3. –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---

if __name__ == "__main__":
    clean_file(INPUT_FILE, OUTPUT_FILE)
