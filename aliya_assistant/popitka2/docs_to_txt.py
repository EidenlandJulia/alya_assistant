#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
extract_docs_to_txt.py
–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ docs/ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ docs_text/.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
- PDF (pdfminer.six)
- DOCX, DOC (python-docx)
- RTF (—á—Ç–µ–Ω–∏–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç)
- TXT (–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å)

–†–µ–∑—É–ª—å—Ç–∞—Ç:
- –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞—ë—Ç—Å—è .txt-—Ñ–∞–π–ª —Å —Ç–µ–º –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º.
- –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–ø–∫—É docs_text/
"""

import os
import re
from pathlib import Path
from pdfminer.high_level import extract_text as pdf_extract_text
from docx import Document

# ----------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ -----------
DOCS_DIR = Path("docs")
OUTPUT_DIR = Path("docs_text")
OUTPUT_DIR.mkdir(exist_ok=True)

SUPPORTED = {".pdf", ".doc", ".docx", ".rtf", ".txt"}


# ----------- –£—Ç–∏–ª–∏—Ç—ã -----------
def clean_text(s: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã –∏ –Ω–µ–≤–∏–¥–∏–º—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã"""
    s = re.sub(r"\s+", " ", s)
    s = s.replace("\x0c", "").strip()
    return s


def extract_pdf(path: Path) -> str:
    try:
        return clean_text(pdf_extract_text(path))
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ PDF {path.name}: {e}")
        return ""


def extract_docx(path: Path) -> str:
    try:
        doc = Document(path)
        text = "\n".join(p.text for p in doc.paragraphs)
        return clean_text(text)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ DOCX {path.name}: {e}")
        return ""


def extract_txt(path: Path) -> str:
    try:
        with open(path, "r", encoding="utf-8", errors="ignore") as f:
            return clean_text(f.read())
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ TXT {path.name}: {e}")
        return ""


def extract_rtf(path: Path) -> str:
    try:
        with open(path, "r", encoding="utf-8", errors="ignore") as f:
            content = f.read()
        text = re.sub(r"{\\[^}]+}", "", content)  # –ø—Ä–æ—Å—Ç–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤
        return clean_text(text)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ RTF {path.name}: {e}")
        return ""


# ----------- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ -----------
def main():
    files = [f for f in DOCS_DIR.iterdir() if f.is_file() and f.suffix.lower() in SUPPORTED]
    print(f"üìÇ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")

    for file_path in files:
        ext = file_path.suffix.lower()
        print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞: {file_path.name}")

        if ext == ".pdf":
            text = extract_pdf(file_path)
        elif ext in {".doc", ".docx"}:
            text = extract_docx(file_path)
        elif ext == ".rtf":
            text = extract_rtf(file_path)
        elif ext == ".txt":
            text = extract_txt(file_path)
        else:
            print(f"‚è≠ –ü—Ä–æ–ø—É—Å–∫: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç {ext}")
            continue

        if not text.strip():
            print(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –≤ {file_path.name}")
            continue

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        output_file = OUTPUT_DIR / (file_path.stem + ".txt")
        with open(output_file, "w", encoding="utf-8") as out:
            out.write(text)

    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –í—Å–µ —Ç–µ–∫—Å—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É docs_text/")


if __name__ == "__main__":
    main()
