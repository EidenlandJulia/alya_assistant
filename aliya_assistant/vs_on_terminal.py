import os
import sys
import openai
from dotenv import load_dotenv
from datetime import datetime
from colorama import Fore, Style, init

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama
init(autoreset=True)

# === –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ ===
def clear():
    os.system("cls" if os.name == "nt" else "clear")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
load_dotenv()
client = openai.OpenAI(
    api_key=os.getenv("OPENAI_API_KEY"),
    base_url=os.getenv("OPENAI_BASE_URL", "https://api.openai.com/v1")
)

MODELS = {
    "1": "gpt-4o-mini",
    "2": "gpt-4o",
    "3": "gpt-3.5-turbo",
}

LANGUAGES = {
    "1": ("ru", "–†—É—Å—Å–∫–∏–π üá∑üá∫"),
    "2": ("en", "English üá¨üáß"),
    "3": ("he", "◊¢◊ë◊®◊ô◊™ üáÆüá±"),
}

# === –ó–∞–≥–æ–ª–æ–≤–æ–∫ ===
def print_header():
    print(Fore.CYAN + Style.BRIGHT + "=" * 70)
    print(Fore.YELLOW + Style.BRIGHT + "  –ù –ï –ô –† –û –ö –û –ù –° –£ –õ –¨ –¢ –ê –ù –¢   ‚Äî  –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –∞–ª–∏–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print(Fore.CYAN + Style.BRIGHT + "=" * 70 + "\n")

# === –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ ===
def choose_model():
    print(Fore.GREEN + "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å OpenAI:\n")
    for key, model in MODELS.items():
        print(f"{Fore.WHITE}[{key}] {Fore.LIGHTBLUE_EX}{model}")
    return MODELS.get(input(Fore.WHITE + "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏ (1‚Äì3): ").strip())

# === –í—ã–±–æ—Ä —è–∑—ã–∫–∞ ===
def choose_language():
    clear()
    print_header()
    print(Fore.GREEN + "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:\n")
    for key, (code, name) in LANGUAGES.items():
        print(f"{Fore.WHITE}[{key}] {Fore.LIGHTYELLOW_EX}{name}")
    choice = input(Fore.WHITE + "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —è–∑—ã–∫–∞ (1‚Äì3): ").strip()
    return LANGUAGES.get(choice, LANGUAGES["1"])  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π

# === –ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ ===
def generate_response(model, lang_code, question):
    system_prompts = {
        "ru": "–¢—ã ‚Äî —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ –∞–ª–∏–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ò–∑—Ä–∞–∏–ª—è. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –≤–µ–∂–ª–∏–≤–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
        "en": "You are an employee of the Ministry of Aliyah and Integration. Respond briefly and politely in English.",
        "he": "◊ê◊™◊î ◊¢◊ï◊ë◊ì ◊û◊©◊®◊ì ◊î◊¢◊ú◊ô◊ô◊î ◊ï◊î◊ß◊ú◊ô◊ò◊î. ◊¢◊†◊î ◊ë◊ß◊¶◊®◊î ◊ï◊ë◊†◊ô◊û◊ï◊° ◊ë◊¢◊ë◊®◊ô◊™.",
    }

    start_time = datetime.now()
    response = client.chat.completions.create(
        model=model,
        messages=[
            {"role": "system", "content": system_prompts[lang_code]},
            {"role": "user", "content": question},
        ],
    )
    duration = (datetime.now() - start_time).total_seconds()
    answer = (response.choices[0].message.content or "").strip()
    return answer, duration

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ===
def main():
    while True:
        clear()
        print_header()

        lang_code, lang_name = choose_language()
        clear()
        print_header()
        print(Fore.CYAN + f"–¢–µ–∫—É—â–∏–π —è–∑—ã–∫: {lang_name}\n")

        model = choose_model()
        if not model:
            print(Fore.RED + "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏.")
            sys.exit(1)

        # –í–µ—á–Ω—ã–π —Ü–∏–∫–ª –≤–æ–ø—Ä–æ—Å–æ–≤
        while True:
            clear()
            print_header()
            print(Fore.LIGHTCYAN_EX + f"–ú–æ–¥–µ–ª—å: {model}")
            print(Fore.LIGHTYELLOW_EX + f"–Ø–∑—ã–∫: {lang_name}\n")

            question = input(Fore.WHITE + Style.BRIGHT + "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n> ").strip()
            if not question:
                print(Fore.RED + "–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
                continue

            clear()
            print_header()
            print(Fore.CYAN + f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏ {model}...\n")

            try:
                answer, duration = generate_response(model, lang_code, question)


                # === –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ ===
                report = (
                    f"–û–¢–ß–Å–¢ –û –†–ê–ë–û–¢–ï –ú–û–î–ï–õ–ò\n"
                    f"{'='*60}\n"
                    f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime.now():%Y-%m-%d %H:%M:%S}\n"
                    f"–ú–æ–¥–µ–ª—å: {model}\n"
                    f"–Ø–∑—ã–∫: {lang_name}\n"
                    f"–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {duration:.2f} —Å–µ–∫—É–Ω–¥\n"
                    f"{'-'*60}\n"
                    f"–í–æ–ø—Ä–æ—Å:\n{question}\n\n"
                    f"–û—Ç–≤–µ—Ç:\n{answer}\n"
                    f"{'='*60}\n"
                )
                with open("report.txt", "a", encoding="utf-8") as f:
                    f.write(report + "\n\n")

                print(Fore.GREEN + "‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ report.txt\n")
                print(Fore.WHITE + Style.BRIGHT + "–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:\n")
                print(Fore.LIGHTYELLOW_EX + answer + "\n")

            except Exception as e:
                print(Fore.RED + f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {e}")

            # –ú–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
            print(Fore.CYAN + "\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?\n")
            print(Fore.WHITE + "[1]" + Fore.LIGHTGREEN_EX + " –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")
            print(Fore.WHITE + "[2]" + Fore.LIGHTBLUE_EX + " –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å / —è–∑—ã–∫")
            print(Fore.WHITE + "[3]" + Fore.RED + " –í—ã–π—Ç–∏\n")

            next_action = input(Fore.WHITE + "–í–∞—à –≤—ã–±–æ—Ä (1‚Äì3): ").strip()

            if next_action == "3":
                print(Fore.YELLOW + "\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
                sys.exit(0)
            elif next_action == "2":
                break
            elif next_action == "1":
                continue
            else:
                print(Fore.RED + "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.")
                break

if __name__ == "__main__":
    main()
